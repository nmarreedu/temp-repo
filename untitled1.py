# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tFijsQ0qmSwN09aTzY0laG0AYaxe5ylE
"""

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

tesla = yf.Ticker('TSLA') # Removed extra indent
tesla_data = tesla.history(period="max")
tesla_data.reset_index(inplace=True)
tesla_data.head()

import requests

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text
print(html_data)

import requests
from bs4 import BeautifulSoup

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text

soup = BeautifulSoup(html_data, 'html5lib') # You can also use 'html.parser'
print(soup.prettify())

import requests
from bs4 import BeautifulSoup
import pandas as pd

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text

soup = BeautifulSoup(html_data, 'html5lib')

# 1. Create an Empty DataFrame
tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])

# 2. Find the Relevant Table
tesla_revenue_table = soup.find('table')  # You might need to adjust this if there are multiple tables

# 3. Check for the Tesla Quarterly Revenue Table (optional)
if tesla_revenue_table:
    if "Tesla Quarterly Revenue" in tesla_revenue_table.find('th').text:
        # 4. Iterate Through Rows in the Table Body
        for row in tesla_revenue_table.find("tbody").find_all('tr'):
            # 5. Extract Data from Columns
            col = row.find_all("td")
            if len(col) >= 2:  # Ensure there are at least two columns (Date and Revenue)
                date = col[0].text
                revenue = col[1].text

                # 6. Append Data to the DataFrame
                tesla_revenue = tesla_revenue.append({"Date": date, "Revenue": revenue}, ignore_index=True)

tesla_revenue.head()

import requests
from bs4 import BeautifulSoup
import pandas as pd

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text

soup = BeautifulSoup(html_data, 'html5lib')

tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])

# Isolate the table with Tesla Quarterly Revenue
tesla_revenue_table_body = soup.find_all("tbody")[1]

# Iterate through rows in the table body and store data in a list
data = []
for row in tesla_revenue_table_body.find_all('tr'):
    # Extract data from columns
    col = row.find_all("td")
    if len(col) >= 2:
        date = col[0].text
        revenue = col[1].text
        data.append({"Date": date, "Revenue": revenue})

# Create the DataFrame from the list of data
tesla_revenue = pd.DataFrame(data)

tesla_revenue.head()

tesla_revenue['Revenue'] = tesla_revenue['Revenue'].str.replace(',', '').str.replace('$', '')

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'].notna()]
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != '']

tesla_revenue.tail()

!pip install yfinance
import yfinance as yf

gme_ticker = yf.Ticker("GME")

gme_data = gme_ticker.history(period="max")

gme_data.reset_index(inplace=True)
gme_data.head()

import pandas as pd
import requests
from bs4 import BeautifulSoup

url_2 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data_2 = requests.get(url_2).text
soup_2 = BeautifulSoup(html_data_2, 'html5lib')  # Or use 'html.parser'


# Find the table containing GameStop revenue
gme_revenue_table = soup_2.find('table')

# Extract data into a list of dictionaries
data = []
if gme_revenue_table:
    for row in gme_revenue_table.find("tbody").find_all('tr'):
        col = row.find_all("td")
        if len(col) >= 2:
            date = col[0].text
            revenue = col[1].text.replace(',', '').replace('$', '')  # Remove comma and dollar sign
            data.append({"Date": date, "Revenue": revenue})

# Create the DataFrame
gme_revenue = pd.DataFrame(data)

gme_revenue.head()

gme_revenue.tail()

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt  # Import for plotting

def make_graph(data, stock):
    plt.figure(figsize=(10,6))
    # Reset the index to make 'Date' a column
    data = data.reset_index()
    plt.plot(data['Date'], data['Close'])  # Now 'Date' column exists
    plt.xlabel("Date")
    plt.ylabel("Closing Price")
    plt.title(f"{stock} Stock Price (up to June 2021)")
    plt.grid(True)
    plt.show()

# Now, outside the function definition, call it with your data:
tesla = yf.Ticker('TSLA')
tesla_data = tesla.history(period="max")
make_graph(tesla_data, "TSLA")

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt  # Import for plotting

def make_graph(stock_data, revenue_data, stock_name):
    fig, ax1 = plt.subplots(figsize=(10,6))

    # Convert 'Date' to datetime in both DataFrames if they aren't already
    stock_data['Date'] = pd.to_datetime(stock_data['Date'])
    revenue_data['Date'] = pd.to_datetime(revenue_data['Date'])

    color = 'tab:blue'
    ax1.set_xlabel('Date')
    ax1.set_ylabel('Closing Price', color=color)
    ax1.plot(stock_data['Date'], stock_data['Close'], color=color)
    ax1.tick_params(axis='y', labelcolor=color)

    ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis

    color = 'tab:red'
    ax2.set_ylabel('Revenue', color=color)  # we already handled the x-label with ax1
    ax2.plot(revenue_data['Date'], revenue_data['Revenue'], color=color)
    ax2.tick_params(axis='y', labelcolor=color)

    fig.tight_layout()  # otherwise the right y-label is slightly clipped
    plt.title(f"{stock_name} Stock Price and Revenue")
    plt.grid(True)
    plt.show()

# Now, outside the function definition, call it with your data:
# Assuming gme_data and gme_revenue are already defined as in your previous code
make_graph(gme_data, gme_revenue, 'GameStop')